local module = {}

local mouse = game.Players.LocalPlayer:GetMouse()

local DRAGGER_SIZE = 30
local DRAGGER_TRANSPARENCY = .5

local dragging = false

function module.makeResizable(obj:GuiObject, minSize)

	local resizer = Instance.new("Frame")
	local dragger = Instance.new("ImageButton")
	local UICorner = Instance.new("UICorner")

	resizer.Name = "resizer"
	resizer.Parent = game.ReplicatedStorage["Keirebu's UI Libary"].guiResizer
	resizer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	resizer.BackgroundTransparency = 1.000
	resizer.BorderColor3 = Color3.fromRGB(27, 42, 53)
	resizer.ClipsDescendants = true
	resizer.Position = UDim2.new(1, -30, 1, -30)
	resizer.Size = UDim2.new(0, 30, 0, 30)
	resizer.SizeConstraint = Enum.SizeConstraint.RelativeXX

	dragger.Name = "dragger"
	dragger.Parent = resizer
	dragger.BackgroundColor3 = Color3.fromRGB(255, 85, 0)
	dragger.BackgroundTransparency = 1.000
	dragger.BorderColor3 = Color3.fromRGB(27, 42, 53)
	dragger.BorderSizePixel = 0
	dragger.Size = UDim2.new(2, 0, 2, 0)
	dragger.ZIndex = 2
	dragger.ImageTransparency = 1.000

	UICorner.CornerRadius = UDim.new(0.5, 0)
	UICorner.Parent = dragger
	
	resizer.Size = UDim2.fromOffset(DRAGGER_SIZE, DRAGGER_SIZE)
	resizer.Position = UDim2.new(1, -DRAGGER_SIZE, 1, -DRAGGER_SIZE)
	
	local duic = dragger.UICorner
	minSize = minSize or Vector2.new(160, 90)
	
	local startDrag, startSize
	local gui = obj:FindFirstAncestorWhichIsA("ScreenGui")
	resizer.Parent = obj

	local function finishResize(tr)
		dragger.Position = UDim2.new(0,0,0,0)
		dragger.Size = UDim2.new(2,0,2,0)
		dragger.Parent = resizer
		dragger.BackgroundTransparency = tr
		duic.Parent = dragger
		startDrag = nil
	end
	dragger.MouseButton1Down:Connect(function()
		if not startDrag then
			startSize = obj.AbsoluteSize			
			startDrag = Vector2.new(mouse.X, mouse.Y)
			dragger.BackgroundTransparency = 1
			dragger.Size = UDim2.fromOffset(gui.AbsoluteSize.X, gui.AbsoluteSize.Y)
			dragger.Position = UDim2.new(0,0,0,0)
			duic.Parent = nil
			dragger.Parent = gui
		end
	end)	
	dragger.MouseMoved:Connect(function()
		if startDrag then		
			local m = Vector2.new(mouse.X, mouse.Y)
			local mouseMoved = Vector2.new(m.X - startDrag.X, m.Y - startDrag.Y)
			
			local s = startSize + mouseMoved
			local sx = math.max(minSize.X, s.X) 
			local sy = math.max(minSize.Y, s.Y)
			
			obj.Size = UDim2.fromOffset(sx, sy)
			
		end
	end)
	dragger.MouseEnter:Connect(function()
		finishResize(DRAGGER_TRANSPARENCY)				
	end)
	dragger.MouseLeave:Connect(function()
		finishResize(1)
	end)		
	dragger.MouseButton1Up:Connect(function()
		finishResize(DRAGGER_TRANSPARENCY)
	end)	
end

function module.makeDraggable(obj, dragger)
	local UIS = game:GetService("UserInputService")
	local dragInput, dragStart
	local startPos = obj.Position
	local function updateInput(input)
		local offset = input.Position - dragStart
		local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + offset.X, startPos.Y.Scale, startPos.Y.Offset + offset.Y)
		game:GetService("TweenService"):Create(obj, TweenInfo.new(0.25), {Position = Position}):Play()
	end
	dragger.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and not UIS:GetFocusedTextBox() then
			dragging = true
			dragStart = input.Position
			startPos = obj.Position
			module.dragged = obj
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	dragger.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	UIS.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			updateInput(input)
		end
	end)
end

return module
